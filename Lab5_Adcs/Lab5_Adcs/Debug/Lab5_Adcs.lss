
Lab5_Adcs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000284  00000318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000284  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800120  00800120  00000338  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000866  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d5  00000000  00000000  00000c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038b  00000000  00000000  00001343  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  000016d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000404  00000000  00000000  000017f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f1  00000000  00000000  00001bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001eed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 23 01 	jmp	0x246	; 0x246 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e8       	ldi	r30, 0x84	; 132
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 32       	cpi	r26, 0x23	; 35
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9b 00 	call	0x136	; 0x136 <main>
  9e:	0c 94 40 01 	jmp	0x280	; 0x280 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <reset_timer0>:

// PROTOTIPOS DE FUNCIONES
int reset_timer0(void)
{
	// Operamos el temporizador en modo NORMAL
	TCCR0B |= (1 << CS01) | (1 << CS00);	// Prescaler de 64
  a6:	85 b5       	in	r24, 0x25	; 37
  a8:	83 60       	ori	r24, 0x03	; 3
  aa:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 254;
  ac:	8e ef       	ldi	r24, 0xFE	; 254
  ae:	86 bd       	out	0x26, r24	; 38
	
	// Habilitar interrupciones por overflow de TIMER0
	TIMSK0 |= (1 << TOIE0);
  b0:	ee e6       	ldi	r30, 0x6E	; 110
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	80 83       	st	Z, r24
	return 0;
}
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	08 95       	ret

000000c0 <show_number>:

// Mostrar números en Displays
void show_number(unsigned char num)
{
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
  c8:	a0 97       	sbiw	r28, 0x20	; 32
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	f8 94       	cli
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	cd bf       	out	0x3d, r28	; 61
	unsigned int Tabla[] = {0x77, 0x42, 0x6D, 0x6B, 0x5A, 0x3B, 0x3F, 0x62, 0x7F, 0x7A, 0x7E, 0x1F, 0x35, 0x4F, 0x3D, 0x3C};
  d4:	90 e2       	ldi	r25, 0x20	; 32
  d6:	e0 e0       	ldi	r30, 0x00	; 0
  d8:	f1 e0       	ldi	r31, 0x01	; 1
  da:	de 01       	movw	r26, r28
  dc:	11 96       	adiw	r26, 0x01	; 1
  de:	01 90       	ld	r0, Z+
  e0:	0d 92       	st	X+, r0
  e2:	9a 95       	dec	r25
  e4:	e1 f7       	brne	.-8      	; 0xde <show_number+0x1e>
	PORTD = Tabla[num];
  e6:	e8 2f       	mov	r30, r24
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	ee 0f       	add	r30, r30
  ec:	ff 1f       	adc	r31, r31
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	8c 0f       	add	r24, r28
  f4:	9d 1f       	adc	r25, r29
  f6:	e8 0f       	add	r30, r24
  f8:	f9 1f       	adc	r31, r25
  fa:	80 81       	ld	r24, Z
  fc:	8b b9       	out	0x0b, r24	; 11
}
  fe:	a0 96       	adiw	r28, 0x20	; 32
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	f8 94       	cli
 104:	de bf       	out	0x3e, r29	; 62
 106:	0f be       	out	0x3f, r0	; 63
 108:	cd bf       	out	0x3d, r28	; 61
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <low_nibble>:
// Sacar el nibble bajo de un número de 1 byte
unsigned char low_nibble(char num)
{
	unsigned char low_nib = num & 0x0F; // Aplicamos una máscara sólo para los últimos 4 bits
	return low_nib;
}
 110:	8f 70       	andi	r24, 0x0F	; 15
 112:	08 95       	ret

00000114 <high_nibble>:
// Sacar el nibble alto de un número de 1 byte
unsigned char high_nibble(char num)
{
	unsigned char high_nib = (num >> 4); // Aplicamos una máscara sólo para los últimos 4 bits
	return high_nib;
}
 114:	82 95       	swap	r24
 116:	8f 70       	andi	r24, 0x0F	; 15
 118:	08 95       	ret

0000011a <setup_adc>:

void setup_adc(void)
{
	ADMUX  = (1 << ADLAR) | (1 << REFS0) | (1 << MUX2);   // Seleccionar el canal ADC4 y fuente AVCC (Descartar últimos 2 bits)
 11a:	84 e6       	ldi	r24, 0x64	; 100
 11c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADIE);
 120:	ea e7       	ldi	r30, 0x7A	; 122
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	88 e8       	ldi	r24, 0x88	; 136
 126:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);  // Establecer prescaler de 64
 128:	80 81       	ld	r24, Z
 12a:	86 60       	ori	r24, 0x06	; 6
 12c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
 12e:	80 81       	ld	r24, Z
 130:	80 64       	ori	r24, 0x40	; 64
 132:	80 83       	st	Z, r24
 134:	08 95       	ret

00000136 <main>:

// SETUP Y MAINLOOP
int main(void)
{	
	// CONFIGURACIÓN DE PUERTOS
	DDRB = (1 << 5);						// PB5 es salida
 136:	80 e2       	ldi	r24, 0x20	; 32
 138:	84 b9       	out	0x04, r24	; 4
	PORTB = (1 << 0) | (1 << 1);			// Habilitar pull-ups en PORTB
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	85 b9       	out	0x05, r24	; 5
	DDRC = (1 << 1) | (1 << 2) | (1 << 3);	// BITS 1-3 del puerto C son salidas
 13e:	9e e0       	ldi	r25, 0x0E	; 14
 140:	97 b9       	out	0x07, r25	; 7
	PORTC = (1 << PORTC1);					// Encender el bit 1 de PORTC
 142:	92 e0       	ldi	r25, 0x02	; 2
 144:	98 b9       	out	0x08, r25	; 8
	DDRD = 0XFF;							// El puerto D es de salidas
 146:	9f ef       	ldi	r25, 0xFF	; 255
 148:	9a b9       	out	0x0a, r25	; 10
	// CONFIGURACIÓN DE TIMER DE SISTEMA
	//CLKPR |= (1 << CLKPCE);					// Habilitar cambio en prescaler de reloj principal
	//CLKPR |= (1 << CLKPS2);					// Utilizar un prescaler de 16 

	// HABILITACIÓN DE INTERRUPCIONES PIN-CHANGE
	PCMSK0 = (1 << 0) | (1 << 1);
 14a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	PCICR = (1 << PCIE0);					// Habilitar interrupciones pin-change en PORTB
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	
	// CONFIGURACIÓN DE TIMER0
	reset_timer0();
 154:	0e 94 53 00 	call	0xa6	; 0xa6 <reset_timer0>
	
	// CONFIGURACIÓN DE ADC
	setup_adc();
 158:	0e 94 8d 00 	call	0x11a	; 0x11a <setup_adc>
	
	// Habilitar interrupciones
	sei();
 15c:	78 94       	sei
    while (1)
	{
		//unsigned char temp = ADCL;
		
		// ENCENDER ALARMA SI ADCL es mayor a contador
		if(adc_hi > contador)
 15e:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <adc_hi>
 162:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 166:	89 17       	cp	r24, r25
 168:	20 f4       	brcc	.+8      	; 0x172 <main+0x3c>
		{
			PORTB |= (1 << PORTB5);		// Encender sólo PB5
 16a:	85 b1       	in	r24, 0x05	; 5
 16c:	80 62       	ori	r24, 0x20	; 32
 16e:	85 b9       	out	0x05, r24	; 5
 170:	f6 cf       	rjmp	.-20     	; 0x15e <main+0x28>
		}	
		else
		{
			PORTB &= ~(1 << PORTB5);	// Apagar solo PB5
 172:	85 b1       	in	r24, 0x05	; 5
 174:	8f 7d       	andi	r24, 0xDF	; 223
 176:	85 b9       	out	0x05, r24	; 5
 178:	f2 cf       	rjmp	.-28     	; 0x15e <main+0x28>

0000017a <__vector_3>:



// RUTINAS DE INTERRUPCIÓN
ISR(PCINT0_vect)
{	
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	8f 93       	push	r24
	unsigned char temp = PINB & 0b00000011;  // Quedarnos con solo PB0 y PB1
 186:	83 b1       	in	r24, 0x03	; 3
 188:	83 70       	andi	r24, 0x03	; 3
	
	switch (temp)
 18a:	81 30       	cpi	r24, 0x01	; 1
 18c:	41 f0       	breq	.+16     	; 0x19e <__vector_3+0x24>
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	59 f4       	brne	.+22     	; 0x1a8 <__vector_3+0x2e>
	{
	// Estas operaciones se dejaron en este formato por posibles cambios de compilador
	case (1 << PINB1):
		contador = contador + 1;
 192:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 196:	8f 5f       	subi	r24, 0xFF	; 255
 198:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
		break;
 19c:	05 c0       	rjmp	.+10     	; 0x1a8 <__vector_3+0x2e>
		
	case (1 << PINB0):
		contador = contador - 1;
 19e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 1a2:	81 50       	subi	r24, 0x01	; 1
 1a4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
		break;
		
	default :
		break;
	}
	PORTD = contador;
 1a8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 1ac:	8b b9       	out	0x0b, r24	; 11
}
 1ae:	8f 91       	pop	r24
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

000001ba <__vector_16>:

// Rutina de interrupción por overflow de Timer0 - Multiplexado
ISR(TIMER0_OVF_vect)
{
 1ba:	1f 92       	push	r1
 1bc:	0f 92       	push	r0
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	0f 92       	push	r0
 1c2:	11 24       	eor	r1, r1
 1c4:	2f 93       	push	r18
 1c6:	3f 93       	push	r19
 1c8:	4f 93       	push	r20
 1ca:	5f 93       	push	r21
 1cc:	6f 93       	push	r22
 1ce:	7f 93       	push	r23
 1d0:	8f 93       	push	r24
 1d2:	9f 93       	push	r25
 1d4:	af 93       	push	r26
 1d6:	bf 93       	push	r27
 1d8:	ef 93       	push	r30
 1da:	ff 93       	push	r31
	unsigned char temp1 = PINC & 0b00001110;  // Quedarnos con solo PC1 a PC3
 1dc:	86 b1       	in	r24, 0x06	; 6
 1de:	8e 70       	andi	r24, 0x0E	; 14
	unsigned char temp2 = 0;  // Inicializamos temp2 en 0
	
	// Comprobamos el estado de los pines PC1, PC2, y PC3
	switch (temp1)
 1e0:	84 30       	cpi	r24, 0x04	; 4
 1e2:	61 f0       	breq	.+24     	; 0x1fc <__vector_16+0x42>
 1e4:	88 30       	cpi	r24, 0x08	; 8
 1e6:	91 f0       	breq	.+36     	; 0x20c <__vector_16+0x52>
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	a9 f4       	brne	.+42     	; 0x216 <__vector_16+0x5c>
		case (1 << PINC1):
		{
			// MOSTRAR CONTADOR
			temp2 = (1 << PINC2);  // Activamos PC2
			//show_number(adc_hi); Mostrar ADCH
			show_number(high_nibble(adc_hi));
 1ec:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <adc_hi>
 1f0:	0e 94 8a 00 	call	0x114	; 0x114 <high_nibble>
 1f4:	0e 94 60 00 	call	0xc0	; 0xc0 <show_number>
	switch (temp1)
	{
		case (1 << PINC1):
		{
			// MOSTRAR CONTADOR
			temp2 = (1 << PINC2);  // Activamos PC2
 1f8:	24 e0       	ldi	r18, 0x04	; 4
			//show_number(adc_hi); Mostrar ADCH
			show_number(high_nibble(adc_hi));
			break;	
 1fa:	0e c0       	rjmp	.+28     	; 0x218 <__vector_16+0x5e>
		case (1 << PINC2):
		{	
			// MOSTRAR NÚMERO 2
			temp2 = (1 << PINC3);  // Activamos PC3
			//show_number(adc_lo); // Mostrar ADCL
			show_number(low_nibble(adc_hi));
 1fc:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <adc_hi>
 200:	0e 94 88 00 	call	0x110	; 0x110 <low_nibble>
 204:	0e 94 60 00 	call	0xc0	; 0xc0 <show_number>
		}
		
		case (1 << PINC2):
		{	
			// MOSTRAR NÚMERO 2
			temp2 = (1 << PINC3);  // Activamos PC3
 208:	28 e0       	ldi	r18, 0x08	; 8
			//show_number(adc_lo); // Mostrar ADCL
			show_number(low_nibble(adc_hi));
			break;	
 20a:	06 c0       	rjmp	.+12     	; 0x218 <__vector_16+0x5e>
		case (1 << PINC3):
		{
			// MOSTRAR NÚMERO 1 
			temp2 = (1 << PINC1);  // Activamos PC1
			
			PORTD = contador;
 20c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 210:	8b b9       	out	0x0b, r24	; 11
		}
		
		case (1 << PINC3):
		{
			// MOSTRAR NÚMERO 1 
			temp2 = (1 << PINC1);  // Activamos PC1
 212:	22 e0       	ldi	r18, 0x02	; 2
			
			PORTD = contador;
			break;	
 214:	01 c0       	rjmp	.+2      	; 0x218 <__vector_16+0x5e>
		}
		
		default:
		{
			// MOSTRAR NÚMERO 1
			temp2 = (1 << PINC1);  // Si no se cumple ningún caso, activamos PC1 por defecto
 216:	22 e0       	ldi	r18, 0x02	; 2
			break;			
		}
	}

	// Limpiamos los pines de PC1 a PC3, y luego activamos el nuevo pin
	PORTC &= 0b11110000;    // Apagamos PC1, PC2 y PC3 (pines más altos se mantienen intactos)
 218:	98 b1       	in	r25, 0x08	; 8
 21a:	90 7f       	andi	r25, 0xF0	; 240
 21c:	98 b9       	out	0x08, r25	; 8
	PORTC |= temp2;         // Activamos el pin seleccionado
 21e:	88 b1       	in	r24, 0x08	; 8
 220:	82 2b       	or	r24, r18
 222:	88 b9       	out	0x08, r24	; 8
}
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	bf 91       	pop	r27
 22a:	af 91       	pop	r26
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	7f 91       	pop	r23
 232:	6f 91       	pop	r22
 234:	5f 91       	pop	r21
 236:	4f 91       	pop	r20
 238:	3f 91       	pop	r19
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <__vector_21>:


ISR(ADC_vect)
{
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	8f 93       	push	r24
 252:	ef 93       	push	r30
 254:	ff 93       	push	r31
	adc_lo = ADCL;			// Guardar byte bajo
 256:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 25a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <adc_lo>
	adc_hi = ADCH;			// Guardar byte alto
 25e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 262:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <adc_hi>
	ADCSRA |= (1 << ADSC);	// Iniciar conversión
 266:	ea e7       	ldi	r30, 0x7A	; 122
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	80 64       	ori	r24, 0x40	; 64
 26e:	80 83       	st	Z, r24
 270:	ff 91       	pop	r31
 272:	ef 91       	pop	r30
 274:	8f 91       	pop	r24
 276:	0f 90       	pop	r0
 278:	0f be       	out	0x3f, r0	; 63
 27a:	0f 90       	pop	r0
 27c:	1f 90       	pop	r1
 27e:	18 95       	reti

00000280 <_exit>:
 280:	f8 94       	cli

00000282 <__stop_program>:
 282:	ff cf       	rjmp	.-2      	; 0x282 <__stop_program>
